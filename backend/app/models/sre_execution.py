"""
Agent execution tracking models for the self-healing SRE system
"""

from sqlalchemy import Column, Integer, String, Text, DateTime, JSON, Boolean, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from datetime import datetime
from typing import Optional, Dict, Any, List

from app.core.database import Base


class IncidentExecutionLog(Base):
    """Track detailed execution logs for SRE agent incidents"""
    __tablename__ = "incident_execution_log"
    
    id = Column(Integer, primary_key=True, index=True)
    incident_number = Column(String(50), nullable=False, index=True)
    agent_name = Column(String(100), nullable=False)
    step = Column(Integer, nullable=False)
    timestamp = Column(DateTime(timezone=True), server_default=func.now())
    action_type = Column(String(50), nullable=False)  # "diagnosis", "execution", "verification"
    hypothesis = Column(Text)
    command_executed = Column(Text)
    command_output = Column(Text)
    verification = Column(Text)
    status = Column(String(20), nullable=False)  # "running", "success", "error"
    evidence = Column(JSON)
    provenance = Column(JSON)
    
    # Relationship to main incident execution
    incident_execution_id = Column(Integer, ForeignKey("sre_incident_execution.id"))
    incident_execution = relationship("SREIncidentExecution", back_populates="logs")


class SREIncidentExecution(Base):
    """Main tracking for SRE agent incident handling"""
    __tablename__ = "sre_incident_execution"
    
    id = Column(Integer, primary_key=True, index=True)
    incident_number = Column(String(50), unique=True, nullable=False, index=True)
    incident_title = Column(String(500))
    incident_description = Column(Text)
    target_ip = Column(String(45))  # IPv4 or IPv6
    priority = Column(String(20))
    category = Column(String(100))
    assignment_group = Column(String(100))
    
    # Execution state
    status = Column(String(20), nullable=False, default="initiated")  # initiated, running, success, failed
    agent_name = Column(String(100), nullable=False)
    started_at = Column(DateTime(timezone=True), server_default=func.now())
    completed_at = Column(DateTime(timezone=True))
    
    # Results
    resolution_summary = Column(Text)
    final_hypothesis = Column(Text)
    resolution_steps = Column(JSON)  # List of steps taken
    verification_results = Column(JSON)
    
    # ServiceNow payload
    servicenow_payload = Column(JSON)
    
    # Relationships
    logs = relationship("IncidentExecutionLog", back_populates="incident_execution", cascade="all, delete-orphan")
    timeline_entries = relationship("SRETimelineEntry", back_populates="incident_execution", cascade="all, delete-orphan")
    hypotheses = relationship("SREHypothesis", back_populates="incident_execution", cascade="all, delete-orphan")
    verifications = relationship("SREVerification", back_populates="incident_execution", cascade="all, delete-orphan")


class SRETimelineEntry(Base):
    """Timeline of actions taken by the SRE agent"""
    __tablename__ = "sre_timeline_entry"
    
    id = Column(Integer, primary_key=True, index=True)
    incident_execution_id = Column(Integer, ForeignKey("sre_incident_execution.id"), nullable=False)
    step_number = Column(Integer, nullable=False)
    timestamp = Column(DateTime(timezone=True), server_default=func.now())
    action_type = Column(String(50), nullable=False)  # analysis, diagnosis, execution, verification
    title = Column(String(200), nullable=False)
    description = Column(Text)
    status = Column(String(20), nullable=False)  # running, completed, failed
    duration_seconds = Column(Integer)
    entry_metadata = Column(JSON)
    
    incident_execution = relationship("SREIncidentExecution", back_populates="timeline_entries")


class SREHypothesis(Base):
    """Hypotheses generated by the SRE agent"""
    __tablename__ = "sre_hypothesis"
    
    id = Column(Integer, primary_key=True, index=True)
    incident_execution_id = Column(Integer, ForeignKey("sre_incident_execution.id"), nullable=False)
    hypothesis_text = Column(Text, nullable=False)
    confidence_score = Column(Integer)  # 0-100
    reasoning = Column(Text)
    supporting_evidence = Column(JSON)
    status = Column(String(20), default="proposed")  # proposed, testing, confirmed, rejected
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    incident_execution = relationship("SREIncidentExecution", back_populates="hypotheses")


class SREVerification(Base):
    """Verification steps and results"""
    __tablename__ = "sre_verification"
    
    id = Column(Integer, primary_key=True, index=True)
    incident_execution_id = Column(Integer, ForeignKey("sre_incident_execution.id"), nullable=False)
    verification_type = Column(String(50), nullable=False)  # command, health_check, metric_check
    description = Column(Text, nullable=False)
    command_executed = Column(Text)
    expected_result = Column(Text)
    actual_result = Column(Text)
    success = Column(Boolean, nullable=False, default=False)
    timestamp = Column(DateTime(timezone=True), server_default=func.now())
    verification_metadata = Column(JSON)
    
    incident_execution = relationship("SREIncidentExecution", back_populates="verifications")


class SREEvidence(Base):
    """Evidence collected during investigation"""
    __tablename__ = "sre_evidence"
    
    id = Column(Integer, primary_key=True, index=True)
    incident_execution_id = Column(Integer, ForeignKey("sre_incident_execution.id"), nullable=False)
    evidence_type = Column(String(50), nullable=False)  # log, metric, command_output, configuration
    source = Column(String(100), nullable=False)  # where the evidence came from
    content = Column(Text, nullable=False)
    evidence_metadata = Column(JSON)
    collected_at = Column(DateTime(timezone=True), server_default=func.now())
    relevance_score = Column(Integer)  # 0-100
    
    # Foreign key reference (not relationship to avoid circular imports)
    incident_execution_id_ref = Column(Integer)


class SREProvenance(Base):
    """Track provenance and reasoning chains"""
    __tablename__ = "sre_provenance"
    
    id = Column(Integer, primary_key=True, index=True)
    incident_execution_id = Column(Integer, ForeignKey("sre_incident_execution.id"), nullable=False)
    step_id = Column(String(100), nullable=False)  # Unique identifier for this reasoning step
    parent_step_id = Column(String(100))  # Parent step in reasoning chain
    reasoning_type = Column(String(50), nullable=False)  # deduction, induction, abduction
    input_data = Column(JSON)
    reasoning_process = Column(Text)
    output_conclusion = Column(Text)
    confidence = Column(Integer)  # 0-100
    timestamp = Column(DateTime(timezone=True), server_default=func.now())
    agent_component = Column(String(100))  # Which part of the agent made this reasoning
    
    # Foreign key reference
    incident_execution_id_ref = Column(Integer)